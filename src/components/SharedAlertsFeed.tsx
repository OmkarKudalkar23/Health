import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Avatar, AvatarImage, AvatarFallback } from './ui/avatar';
import { 
  Bell, 
  AlertTriangle, 
  Clock, 
  Heart, 
  Pill, 
  Calendar,
  MessageCircle,
  Phone,
  CheckCircle,
  X,
  Filter
} from 'lucide-react';
import { useApp } from '../contexts/AppContext';

interface AlertItem {
  id: string;
  type: 'missed_medication' | 'vitals_abnormal' | 'appointment_booked' | 'emergency' | 'reminder';
  patientId: string;
  patientName: string;
  patientAvatar: string;
  title: string;
  description: string;
  timestamp: Date;
  severity: 'low' | 'medium' | 'high' | 'critical';
  actionRequired: boolean;
  acknowledged: boolean;
  autoGenerated: boolean;
}

export default function SharedAlertsFeed() {
  const { language } = useApp();
  const [alerts, setAlerts] = useState<AlertItem[]>([]);
  const [filter, setFilter] = useState<'all' | 'unacknowledged' | 'critical'>('all');

  // Mock real-time alerts
  useEffect(() => {
    const mockAlerts: AlertItem[] = [
      {
        id: '1',
        type: 'missed_medication',
        patientId: 'mother',
        patientName: 'Sunita Sharma',
        patientAvatar: 'üëµ',
        title: language === 'hi' ? '‡§¶‡§µ‡§æ ‡§õ‡•Ç‡§ü ‡§ó‡§à' : 'Medication Missed',
        description: language === 'hi' ? '‡§Æ‡§æ‡§Å ‡§®‡•á ‡§Ö‡§™‡§®‡•Ä ‡§∏‡•Å‡§¨‡§π ‡§ï‡•Ä ‡§¶‡§µ‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§≤‡•Ä ‡§π‡•à' : 'Mother missed her morning medication',
        timestamp: new Date(Date.now() - 15 * 60 * 1000),
        severity: 'high',
        actionRequired: true,
        acknowledged: false,
        autoGenerated: true
      },
      {
        id: '2',
        type: 'vitals_abnormal',
        patientId: 'spouse',
        patientName: 'Priya Sharma',
        patientAvatar: 'üë©',
        title: language === 'hi' ? '‡§â‡§ö‡•ç‡§ö ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™' : 'High Blood Pressure',
        description: language === 'hi' ? '‡§™‡§§‡•ç‡§®‡•Ä ‡§ï‡§æ ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™ 160/95 ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ' : 'Spouse recorded BP of 160/95 - above safe range',
        timestamp: new Date(Date.now() - 30 * 60 * 1000),
        severity: 'critical',
        actionRequired: true,
        acknowledged: false,
        autoGenerated: true
      },
      {
        id: '3',
        type: 'appointment_booked',
        patientId: 'father',
        patientName: 'Raj Kumar Sharma',
        patientAvatar: 'üë¥',
        title: language === 'hi' ? '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§ø‡§Ø‡§æ' : 'Appointment Booked',
        description: language === 'hi' ? '‡§™‡§ø‡§§‡§æ ‡§ï‡§æ ‡§ï‡§≤ 2 ‡§¨‡§ú‡•á ‡§°‡•â. ‡§ï‡•Å‡§Æ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü' : 'Father has appointment with Dr. Kumar tomorrow at 2 PM',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
        severity: 'low',
        actionRequired: false,
        acknowledged: true,
        autoGenerated: false
      },
      {
        id: '4',
        type: 'emergency',
        patientId: 'son',
        patientName: 'Arjun Sharma',
        patientAvatar: 'üßí',
        title: language === 'hi' ? '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï' : 'Emergency Contact',
        description: language === 'hi' ? '‡§¨‡•á‡§ü‡•á ‡§®‡•á ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§Ø‡§æ ‡§π‡•à' : 'Son activated emergency button at school',
        timestamp: new Date(Date.now() - 45 * 60 * 1000),
        severity: 'critical',
        actionRequired: true,
        acknowledged: false,
        autoGenerated: true
      },
      {
        id: '5',
        type: 'reminder',
        patientId: 'mother',
        patientName: 'Sunita Sharma',
        patientAvatar: 'üëµ',
        title: language === 'hi' ? '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§Æ‡§ø‡§≤‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø' : 'Doctor Visit Reminder',
        description: language === 'hi' ? '‡§Æ‡§æ‡§Å ‡§ï‡§æ ‡§Ü‡§ú ‡§∂‡§æ‡§Æ 4 ‡§¨‡§ú‡•á ‡§ö‡•á‡§ï‡§Ö‡§™ ‡§π‡•à' : 'Mother has checkup today at 4 PM',
        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),
        severity: 'medium',
        actionRequired: false,
        acknowledged: true,
        autoGenerated: true
      }
    ];

    setAlerts(mockAlerts);

    // Auto-generate new alerts
    const interval = setInterval(() => {
      if (Math.random() < 0.3) { // 30% chance every 45 seconds
        const newAlert: AlertItem = {
          id: Date.now().toString(),
          type: 'vitals_abnormal',
          patientId: 'mother',
          patientName: 'Sunita Sharma',
          patientAvatar: 'üëµ',
          title: language === 'hi' ? '‡§®‡§à ‡§Ö‡§≤‡§∞‡•ç‡§ü' : 'New Alert',
          description: language === 'hi' ? '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï' : 'Health update required',
          timestamp: new Date(),
          severity: Math.random() > 0.7 ? 'critical' : 'medium',
          actionRequired: true,
          acknowledged: false,
          autoGenerated: true
        };

        setAlerts(prev => [newAlert, ...prev.slice(0, 9)]); // Keep last 10 alerts
      }
    }, 45000);

    return () => clearInterval(interval);
  }, [language]);

  const filteredAlerts = alerts.filter(alert => {
    if (filter === 'unacknowledged') return !alert.acknowledged;
    if (filter === 'critical') return alert.severity === 'critical';
    return true;
  });

  const acknowledgeAlert = (alertId: string) => {
    setAlerts(prev =>
      prev.map(alert =>
        alert.id === alertId ? { ...alert, acknowledged: true } : alert
      )
    );
  };

  const dismissAlert = (alertId: string) => {
    setAlerts(prev => prev.filter(alert => alert.id !== alertId));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-700 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-700 border-blue-200';
      default: return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  };

  const getTypeIcon = (type: string, severity: string) => {
    const iconClass = severity === 'critical' ? 'text-red-600' : 'text-gray-600';
    
    switch (type) {
      case 'missed_medication': return <Pill className={`w-4 h-4 ${iconClass}`} />;
      case 'vitals_abnormal': return <Heart className={`w-4 h-4 ${iconClass}`} />;
      case 'appointment_booked': return <Calendar className={`w-4 h-4 ${iconClass}`} />;
      case 'emergency': return <AlertTriangle className={`w-4 h-4 ${iconClass}`} />;
      case 'reminder': return <Clock className={`w-4 h-4 ${iconClass}`} />;
      default: return <Bell className={`w-4 h-4 ${iconClass}`} />;
    }
  };

  const formatTimestamp = (date: Date) => {
    const minutes = Math.floor((Date.now() - date.getTime()) / (1000 * 60));
    if (minutes < 60) {
      return `${minutes}m ago`;
    }
    const hours = Math.floor(minutes / 60);
    if (hours < 24) {
      return `${hours}h ago`;
    }
    return date.toLocaleDateString();
  };

  const unacknowledgedCount = alerts.filter(a => !a.acknowledged).length;
  const criticalCount = alerts.filter(a => a.severity === 'critical' && !a.acknowledged).length;

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Bell className="w-5 h-5" />
            {language === 'hi' ? '‡§∏‡§æ‡§ù‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§´‡•Ä‡§°' : 'Shared Alerts Feed'}
            {unacknowledgedCount > 0 && (
              <Badge variant="destructive" className="animate-pulse">
                {unacknowledgedCount}
              </Badge>
            )}
          </CardTitle>
          
          <div className="flex items-center gap-2">
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value as any)}
              className="text-sm border rounded px-2 py-1"
            >
              <option value="all">{language === 'hi' ? '‡§∏‡§≠‡•Ä' : 'All'}</option>
              <option value="unacknowledged">{language === 'hi' ? '‡§Ö‡§™‡§†‡§ø‡§§' : 'Unread'}</option>
              <option value="critical">{language === 'hi' ? '‡§ó‡§Ç‡§≠‡•Ä‡§∞' : 'Critical'}</option>
            </select>
            <Button variant="outline" size="icon">
              <Filter className="w-4 h-4" />
            </Button>
          </div>
        </div>
        
        {criticalCount > 0 && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3">
            <div className="flex items-center gap-2 text-red-700">
              <AlertTriangle className="w-4 h-4" />
              <span className="font-medium">
                {criticalCount} {language === 'hi' ? '‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§Ö‡§≤‡§∞‡•ç‡§ü' : 'critical alerts'} {language === 'hi' ? '‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ' : 'require immediate attention'}
              </span>
            </div>
          </div>
        )}
      </CardHeader>
      
      <CardContent className="space-y-3 max-h-96 overflow-y-auto">
        <AnimatePresence>
          {filteredAlerts.map((alert, index) => (
            <motion.div
              key={alert.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, x: -100 }}
              transition={{ delay: index * 0.05 }}
              className={`p-4 border-2 rounded-lg ${getSeverityColor(alert.severity)} ${
                !alert.acknowledged ? 'shadow-md' : 'opacity-75'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="text-2xl">{alert.patientAvatar}</div>
                
                <div className="flex-1 space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      {getTypeIcon(alert.type, alert.severity)}
                      <h4 className="font-medium">{alert.title}</h4>
                      {alert.autoGenerated && (
                        <Badge variant="outline" className="text-xs">
                          Auto
                        </Badge>
                      )}
                    </div>
                    
                    <div className="flex items-center gap-1">
                      {!alert.acknowledged && (
                        <Button
                          variant="ghost"
                          size="icon"
                          className="w-6 h-6"
                          onClick={() => acknowledgeAlert(alert.id)}
                        >
                          <CheckCircle className="w-4 h-4" />
                        </Button>
                      )}
                      <Button
                        variant="ghost"
                        size="icon"
                        className="w-6 h-6"
                        onClick={() => dismissAlert(alert.id)}
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                  
                  <p className="text-sm">{alert.description}</p>
                  
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <span>{alert.patientName}</span>
                      <span>‚Ä¢</span>
                      <span>{formatTimestamp(alert.timestamp)}</span>
                    </div>
                    
                    {alert.actionRequired && !alert.acknowledged && (
                      <div className="flex gap-1">
                        <Button variant="outline" size="sm" className="h-6 text-xs gap-1">
                          <MessageCircle className="w-3 h-3" />
                          {language === 'hi' ? '‡§∏‡§Ç‡§¶‡•á‡§∂' : 'Message'}
                        </Button>
                        <Button variant="outline" size="sm" className="h-6 text-xs gap-1">
                          <Phone className="w-3 h-3" />
                          {language === 'hi' ? '‡§ï‡•â‡§≤' : 'Call'}
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
        
        {filteredAlerts.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            <Bell className="w-12 h-12 mx-auto mb-3 opacity-50" />
            <p>{language === 'hi' ? '‡§ï‡•ã‡§à ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç' : 'No alerts'}</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}